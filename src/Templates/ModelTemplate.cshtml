@using System.Linq
@using System.Collections.Generic
@using AutoRest.Core
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.ObjectiveC
@using AutoRest.ObjectiveC.Model
@inherits AutoRest.Core.Template<AutoRest.ObjectiveC.Model.CompositeTypeOc>
/**
@Header(" * ").TrimMultilineHeader()
*/
@EmptyLine
#import <Foundation/Foundation.h>
#import "Codable.h"
@if (Model.BaseModelType != null)
{
@:#import "@(Model.BaseModelType.DeclarationName.ToPascalCase()).h"
}
@foreach (var property in Model.Properties.OfType<PropertyOc>())
{
    var imports = (property.ModelType as IModelTypeOc)?.Imports;
    if (imports != null)
    {
        foreach (var import in imports)
        {
@:#import "@(import).h"
        }
    }
}
@EmptyLine
/**
@if (string.IsNullOrEmpty(Model.Summary) && string.IsNullOrEmpty(Model.Documentation))
{
@:@WrapComment(" * ", "The " + Model.Name + " model.")
}
else
{
@:@WrapComment(" * ", Model.Summary.EscapeXmlComment().Period())
@:@WrapComment(" * ", Model.Documentation.EscapeXmlComment().Period())
}
*/
@if (Model.BaseIsPolymorphic)
{
    @://JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@(Model.BasePolymorphicDiscriminator)")
    @://JsonTypeName("@(Model.SerializedName)")
    var subTypes = Model.SubTypes.ToList();
    if (subTypes.Any())
    {
        foreach (var type in subTypes)
        {
    @:// SubTypes: name = "@type.SerializedName", value = @type.Name
        }
    }
}
@if (Model.NeedsFlatten)
{
@:// Needs Flatten
}
@if (Model.SkipParentValidation)
{
@:// Skip parent validation
}
@@interface @(Model.Name) : @(Model.BaseModelType != null ? Model.BaseModelType.DeclarationName.ToPascalCase() : "NSObject") <Codable>
@EmptyLine
@foreach (PropertyOc property in Model.Properties)
{
    @:/**
    if (string.IsNullOrEmpty(property.Summary) && string.IsNullOrEmpty(property.Documentation))
    {
    @:@WrapComment(" * ", "The " + property.Name + " property.")
    }
    else
    {
    @:@WrapComment(" * ", property.Summary.EscapeXmlComment().Period())
    @:@WrapComment(" * ", property.Documentation.EscapeXmlComment().Period())
    }
    @:*/
    var jsonSetting = property.GetJsonProperty();
    if (!jsonSetting.IsNullOrEmpty())
    {
    @:// json @(jsonSetting)
    }
    var typeName = (property.ModelType as IModelTypeOc)?.Name;
    var propName = CodeNamer.Instance.GetPropertyName(property.Name);
    @:@@property @typeName* @propName;
    @EmptyLine
}

@if (Model.Properties.Any(p => p.IsConstant) || Model.GenerateConstructorForRequiredProperties)
{
    @:/**
    @:* Creates an instance of @(Model.Name) class.
    foreach (var property in Model.Properties.Where(p => p.IsRequired && !p.IsConstant))
    {
    @:* @@param @property.Name @property.Javadoc()
    }
    @:*/
    @:- (id) init@(Model.RequiredPropertiesConstructorDeclaration);
    @EmptyLine
}
@EmptyLine
@@end