@using System
@using AutoRest.ObjectiveC.Templates
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.ObjectiveC
@using AutoRest.ObjectiveC.Model
@inherits AutoRest.Core.Template<AutoRest.ObjectiveC.Model.CodeModelOc>
/**
@Header(" * ").TrimMultilineHeader()
 */
@EmptyLine

@EmptyLine
@* @foreach (var importClass in Model.ImplImports) *@
@* { *@
@* @:import @importClass; *@
@* } *@

#import "@(Model.Name).h"
@EmptyLine

/**
 * Initializes a new instance of the @Model.Name class.
 */
@@implementation @(Model.Name)
@EmptyLine
@{
    var baseUrlIntit = $"_DEFAULT_BASE_URL = @\"{Model.BaseUrl}\"";

    var roParamsInit = Model.Properties
        .Where(p => p.IsReadOnly).ToList();

    var notRoParams = Model.Properties
        .Where(p => !p.IsReadOnly).ToList();

    if (notRoParams.Any())
    {
        var decl = notRoParams
            .Select(p=>$"{p.Name}: ({p.ModelTypeName}) {p.Name}");
        var declStr = string.Join(" ", decl);
        var paramDecl = char.ToUpper(declStr[0]) + declStr.Substring(1);

    @:+ (id<I@(Model.Name)>) createWith@(paramDecl) {
        @:self = [super init];
        @:if (self) {
            @:@baseUrlIntit;
        foreach (var ro in roParamsInit)
        {
            @:_@(ro.Name.ToCamelCase()) = @(ro.DefaultValue);
        }
        foreach (var nro in notRoParams)
        {
            @:_@(nro.Name.ToCamelCase()) = @(nro.Name.ToCamelCase());
        }
        @:}
        @:return self;
    @:}
    }
    else
    {
    @:+ (id<I@(Model.Name)>) create {
        @:@baseUrlIntit;
        foreach (var ro in roParamsInit)
        {
        @:_@(ro.Name.ToCamelCase()) = @(ro.DefaultValue);
        }
        @:}
    }
}

@* @foreach (var operation in Model.AllOperations) *@
@* { *@
@* @EmptyLine *@
@* @:    /** *@
@* @:     * The @(operation.TypeName) object to access its operations. *@
@* @:     */ *@
@* @:    private @(operation.TypeName) @(operation.Name); *@
@* @EmptyLine *@
@* @:    /** *@
@* @:     * Gets the @(operation.TypeName) object to access its operations. *@
@* @:     * @@return the @(operation.TypeName) object. *@
@* @:     */ *@
@* @:    public @(operation.TypeName) @(operation.Name)() { *@
@* @:        return this.@(operation.Name); *@
@* @:    } *@
@* } *@
@* @EmptyLine *@

@if (Model.RootMethods.Any())
{
    foreach (MethodOc method in Model.RootMethods)
    {
@:@(Include(new MethodTemplate(), method))
@EmptyLine
    }
}
@EmptyLine
@@end
