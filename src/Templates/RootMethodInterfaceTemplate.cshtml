@using System.Linq;
@using AutoRest.Core.Utilities
@using AutoRest.ObjectiveC
@using AutoRest.ObjectiveC.Model
@inherits AutoRest.Core.Template<AutoRest.ObjectiveC.Model.MethodOc>
@if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
@:/**
    if (!string.IsNullOrEmpty(Model.Summary))
    {
@: * @Model.Summary.EscapeXmlComment().Period()
    }

    if (!string.IsNullOrEmpty(Model.Description))
    {
@: * @Model.Description.EscapeXmlComment().Period()
    }

@: *

    foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
    {
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment())
    }

    if (Model.ReturnTypeResponseName.Else("void") != "void")
    {
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
    }
@: */
@:- (void) @(Model.Name)@(Model.MethodRequiredParameterDeclaration);
@EmptyLine
}

/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment())
}
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
- (void) @(Model.Name)@(Model.MethodParameterDeclaration);
