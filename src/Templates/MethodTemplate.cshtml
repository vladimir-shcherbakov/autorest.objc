@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.ObjC
@using AutoRest.ObjC.Model
@inherits AutoRest.Core.Template<AutoRest.ObjC.Model.MethodObjC>
@if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
<text>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
public @Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodRequiredParameterDeclaration) {
@if (@Model.ReturnTypeResponseName == "void")
{
@:    @(Model.Name)WithServiceResponseAsync(@Model.MethodRequiredParameterInvocation).toBlocking().single().body();
}
else
{
@:    return @(Model.Name)WithServiceResponseAsync(@Model.MethodRequiredParameterInvocation).toBlocking().single().body();
}
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
@Model.CallbackDocumentation
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@return the {@@link ServiceFuture} object
 */
public ServiceFuture<@Model.ReturnTypeObjC.ServiceFutureGenericParameterString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclarationWithCallback) {
    return ServiceFuture.@(Model.ServiceFutureFactoryMethod)(@(Model.Name)WithServiceResponseAsync(@Model.MethodRequiredParameterInvocation), serviceCallback);
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeObjC.GenericBodyClientTypeString.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.ReturnTypeObjC.ClientResponseType} object if successful.
}
 */
public Observable<@Model.ReturnTypeObjC.GenericBodyClientTypeString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclaration) {
    return @(Model.Name)WithServiceResponseAsync(@Model.MethodRequiredParameterInvocation).map(new Func1<@Model.ReturnTypeObjC.ClientResponseTypeString, @Model.ReturnTypeObjC.GenericBodyClientTypeString>() {
        @@Override
        public @Model.ReturnTypeObjC.GenericBodyClientTypeString call(@Model.ReturnTypeObjC.ClientResponseTypeString response) {
            return response.body();
        }
    });
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeObjC.GenericBodyClientTypeString.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.ReturnTypeObjC.ClientResponseType} object if successful.
}
 */
public Observable<@Model.ReturnTypeObjC.ClientResponseTypeString> @(Model.Name)WithServiceResponseAsync(@Model.MethodRequiredParameterDeclaration) {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate.Where(p => p.IsRequired))
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterObjC parameter in Model.LocalParameters)
{
    if (!parameter.IsRequired)
    {
@:    final @(parameter.ClientType.Name) @(parameter.Name) = @(parameter.ClientType.GetDefaultValue(Model) ?? "null");
    }
    if (parameter.IsConstant)
    {
@:    final @(parameter.ClientType.Name) @(parameter.Name) = @(parameter.DefaultValue ?? "null");

    }
}

@if (Model.IsParameterizedHost)
{
@:    String parameterizedHost = Joiner.on(", ").join(@Model.HostParameterReplacementArgs);
}

     @Model.ParameterConversion
@*     return service.@(Model.Name)(@Model.MethodRequiredParameterApiInvocation) *@
         .flatMap(new Func1<Response<@Model.CallType>, Observable<@(Model.ReturnTypeObjC.ClientResponseTypeString)>>() {
             @@Override
             public Observable<@(Model.ReturnTypeObjC.ClientResponseTypeString)> call(Response<@Model.CallType> response) {
                 try {
                     @Model.ClientResponse()
                    return Observable.just(clientResponse);
                } catch (Throwable t) {
                    return Observable.error(t);
                }
            }
        });
}
@EmptyLine
</text>
}
