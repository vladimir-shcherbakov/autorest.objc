@using System
@using AutoRest.ObjectiveC.Templates
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.ObjectiveC
@using AutoRest.ObjectiveC.Model
@inherits AutoRest.Core.Template<AutoRest.ObjectiveC.Model.CodeModelOc>
/**
@Header(" * ").TrimMultilineHeader()
 */
@EmptyLine

@EmptyLine
@foreach (var import in Model.InterfaceImports)
{
@:#import "@(import).h"
}
@EmptyLine

/**
 * The interface for @Model.Name class.
 */
@@protocol I@(Model.Name)


@foreach (var operation in Model.AllOperations)
{
@EmptyLine
@:    /**
@:     * Gets the @(operation.TypeName) object to access its operations.
@:     * @@return the @(operation.TypeName) object.
@:     */
@:    @(operation.TypeName) @(operation.Name)();
}
@EmptyLine
@if (Model.RootMethods.Any())
{
    foreach (MethodOc method in Model.RootMethods)
    {
    @:@Include(new MethodInterfaceTemplate(), method)
    @EmptyLine
    }
}
@@end

@EmptyLine
@@interface @Model.Name : NSObject <I@(Model.Name)>
@EmptyLine
    /**
    The default base URL.
    @Model.BaseUrl
    */
    @@property (readonly) (NSString*) DEFAULT_BASE_URL;
@foreach (var property in Model.Properties)
{
    @EmptyLine
    @:/**
    @:@(property.Documentation).
    @:*/
    @:@@property @(property.IsReadOnly ? " (readonly) " : "") (@(property.ModelType.ServiceResponseVariant().Name)) @(property.Name.ToCamelCase());
}
@EmptyLine
@{
    var initParams = Model.Properties
        .Where(p => !p.IsReadOnly)
        .Select(p=>$"{p.Name}: ({p.ModelTypeName}) {p.Name}");
    var str = string.Join(" ", initParams);
    var paramDecl = char.ToUpper(str[0]) + str.Substring(1);
    @:- initWith@(paramDecl);
}

@@end
