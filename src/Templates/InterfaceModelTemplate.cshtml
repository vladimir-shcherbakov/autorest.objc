@using System.Linq
@using AutoRest.ObjC
@using AutoRest.Core.Model
@using AutoRest.ObjC.Model
@using AutoRest.ObjC.Templates
@using AutoRest.Core.Utilities

@inherits AutoRest.Core.Template<AutoRest.ObjC.Model.CompositeTypeObjC>

@Header("// ")

#import <Foundation/Foundation.h>
@EmptyLine
/**
@if (string.IsNullOrEmpty(Model.Summary) && string.IsNullOrEmpty(Model.Documentation))
{
    @:@WrapComment(" * ", "The " + Model.Name + " model.")
}
else
{
    @:@WrapComment(" * ", Model.Summary.EscapeXmlComment().Period())
    @:@WrapComment(" * ", Model.Documentation.EscapeXmlComment().Period())
}
*/
@EmptyLine
@@interface @(Model.Name) : @(Model.BaseModelType != null ? Model.BaseModelType.DeclarationName.ToPascalCase() : "NSObject") {
@EmptyLine
@foreach (PropertyObjC property in Model.Properties)
{
    @:/**
    if (string.IsNullOrEmpty(property.Summary) && string.IsNullOrEmpty(property.Documentation))
    {
        @:@WrapComment("", "The " + property.Name + " property.")
    }
    else
    {
        @:@WrapComment("", property.Summary.EscapeXmlComment().Period())
        @:@WrapComment("", property.Documentation.EscapeXmlComment().Period())
    }
    @:*/
    @:@@property @property.ModelType.Name @property.Name;
    @EmptyLine
}
@if (Model.Properties.Any(p => p.IsConstant) || Model.GenerateConstructorForRequiredProperties)
{
<text>
    /**
        Initializes an instance of @(Model.Name) class.
    @foreach (var property in Model.Properties.Where(p => p.IsRequired && !p.IsConstant))
    {
        @: @@param @property.Name @property.Javadoc()
    }
    */
    - (id) init@(Model.RequiredPropertiesConstructorDeclaration);
    @if (Model.GenerateConstructorForRequiredProperties)
    {
        @:self = [super init];
        @:if (self) {
        foreach (var property in Model.Properties.Where(p => p.IsRequired && !p.IsConstant))
        {
            @:_@(property.Name) = @property.Name;
        }
        @:}
        @:return self;
    }
</text>
}

@foreach (PropertyObjC property in Model.Properties) {

if (!property.IsReadOnly && !(property.IsRequired && Model.GenerateConstructorForRequiredProperties)) {
<text>
    @EmptyLine
    /**
        Set @property.Javadoc()
        
        @@param @property.Name the @property.Name value to set
        @@return the @(Model.Name) object itself.
    */
    - (@(Model.Name)*) with@(property.Name.ToPascalCase()): (@(((IModelTypeObjC)property.ModelType).ResponseVariant.Name)) @property.Name {
    @if (property.ModelType.Name != ((IModelTypeObjC)property.ModelType).ResponseVariant.Name) {
        @:if (@property.Name == null) {
        @:    @(property.Name) = null;
        @:} else {
        @:    @(property.Name) = @(property.FromClientForm);
        @:}
    } else {
        @:_@(property.Name) = @property.Name;
    }
        return self;
    }
</text>
}

}

@EmptyLine
@@end
