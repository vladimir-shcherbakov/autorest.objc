@using System.Linq
@using AutoRest.ObjC
@using AutoRest.Core.Model
@using AutoRest.ObjC.Model
@using AutoRest.ObjC.Templates
@using AutoRest.Core.Utilities

@inherits AutoRest.Core.Template<AutoRest.ObjC.Model.CompositeTypeObjC>

@Header("// ")
@EmptyLine
#import <Foundation/Foundation.h>
@EmptyLine
/**
@if (string.IsNullOrEmpty(Model.Summary) && string.IsNullOrEmpty(Model.Documentation))
{
    @:@WrapComment("", "The " + Model.Name + " model.")
}
else
{
    @:@WrapComment(" * ", Model.Summary.EscapeXmlComment().Period())
    @:@WrapComment(" * ", Model.Documentation.EscapeXmlComment().Period())
}
*/
@EmptyLine
@@interface @(Model.Name) : @(Model.BaseModelType != null ? Model.BaseModelType.DeclarationName.ToPascalCase() : "NSObject")
@EmptyLine
@foreach (PropertyObjC property in Model.Properties)
{
    @:/**
    if (string.IsNullOrEmpty(property.Summary) && string.IsNullOrEmpty(property.Documentation))
    {
        @:@WrapComment("", "The " + property.Name + " property.")
    }
    else
    {
        @:@WrapComment("", property.Summary.EscapeXmlComment().Period())
        @:@WrapComment("", property.Documentation.EscapeXmlComment().Period())
    }
    @:*/
    @:@@property @property.ModelTypeName @property.Name;
    @EmptyLine
}
@if (Model.Properties.Any(p => p.IsConstant) || Model.GenerateConstructorForRequiredProperties) {
    @:/**
        @:Initializes an instance of @(Model.Name) class.
    foreach (var property in Model.Properties.Where(p => p.IsRequired && !p.IsConstant)) {
        @: @@param @property.Name @property.Javadoc()
    }
    @:*/
    if (Model.GenerateConstructorForRequiredProperties) {
    @:- (id) init@(Model.RequiredPropertiesConstructorDeclaration);
    }
}

@foreach (PropertyObjC property in Model.Properties) {

if (!property.IsReadOnly && !(property.IsRequired && Model.GenerateConstructorForRequiredProperties)) {
<text>
    @EmptyLine
    /**
        Set @property.Javadoc()
        @@param @property.Name the @property.Name value to set
        @@return the @(Model.Name) object itself.
    */
@*    - (@(Model.Name)*) with@(property.Name.ToPascalCase()): (@(((IModelTypeObjC)property.ModelType).ResponseVariant.Name)) @property.Name;*@
    - (@(Model.Name)*) with@(property.Name.ToPascalCase()): (@property.ModelTypeName) @property.Name;
</text>
}

}

@EmptyLine
@@end
